# Copyright (C) 2014 - 2023 by the authors of the ASPECT code.
#
# This file is part of ASPECT.
#
# ASPECT is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# ASPECT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ASPECT; see the file LICENSE.  If not see
# <http://www.gnu.org/licenses/>.


# This file provides a macro that authors can use to
# set up a directory with source files that will then be
# compiled into a run-time loadable plugin for Aspect.


FIND_PACKAGE(deal.II 9.4.0 QUIET REQUIRED HINTS @DEAL_II_PATH@ @deal.II_DIR@)
SET(Aspect_INCLUDE_DIRS "@CONFIG_INCLUDE_DIRS@")
SET(Aspect_VERSION "@ASPECT_PACKAGE_VERSION@")
SET(Aspect_DIR "@CONFIG_DIR@")
SET(ASPECT_WITH_WORLD_BUILDER "@ASPECT_WITH_WORLD_BUILDER@")
# force our build type to the one that is used by ASPECT:
SET(CMAKE_BUILD_TYPE "@CMAKE_BUILD_TYPE@" CACHE STRING "select debug or release mode" FORCE)


MACRO(ASPECT_SETUP_PLUGIN _target)
  MESSAGE(STATUS "Setting up plugin:")
  MESSAGE(STATUS "  name <${_target}>")
  MESSAGE(STATUS "  using ASPECT_DIR ${Aspect_DIR}")

  # We create lib${_target}.debug.so, lib${_target}.release.so, or both
  # depending on the compilation mode of ASPECT. Note that the user already
  # created the target under the name ${_target}, so we only need to create
  # a second target in the third case above.
  # Note that you can not rename a target or change its filename, but you can
  # modify the suffix. :-)

  SET(_targets ${_target})
  IF(${CMAKE_BUILD_TYPE} MATCHES "DebugRelease")
    DEAL_II_SETUP_TARGET(${_target} DEBUG)
    SET_TARGET_PROPERTIES(${_target} PROPERTIES SUFFIX ".debug.so")

    GET_TARGET_PROPERTY(_files ${_target} SOURCES)
    ADD_LIBRARY(${_target}.release SHARED ${_files})
    DEAL_II_SETUP_TARGET(${_target}.release RELEASE)
    SET_TARGET_PROPERTIES(${_target}.release PROPERTIES SUFFIX ".so")

    SET(_targets ${_target} ${_target}.release)
  ELSEIF(${CMAKE_BUILD_TYPE} MATCHES "Debug")
    DEAL_II_SETUP_TARGET(${_target} DEBUG)
    SET_TARGET_PROPERTIES(${_target} PROPERTIES SUFFIX ".debug.so")
  ELSE()
    DEAL_II_SETUP_TARGET(${_target} RELEASE)
    SET_TARGET_PROPERTIES(${_target} PROPERTIES SUFFIX ".release.so")
  ENDIF()

  FOREACH(_T ${_targets})
    SET_PROPERTY(TARGET ${_T} APPEND PROPERTY
      INCLUDE_DIRECTORIES "${Aspect_INCLUDE_DIRS}")
    SET_PROPERTY(TARGET ${_T} PROPERTY INSTALL_RPATH_USE_LINK_PATH TRUE)
  ENDFOREACH()

  FILE(RELATIVE_PATH _relative_path ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_LIST_DIR})

  INSTALL(TARGETS ${_targets}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/${_relative_path}
    COMPONENT examples)

  # workarounds for MAC OSX
  IF (APPLE)
    # avoid linker errors about missing functions inside ASPECT:
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
  ENDIF()

  # automatically create a symbolic link to aspect in the current directory:
  ADD_CUSTOM_COMMAND(
    TARGET ${_target} POST_BUILD
    COMMAND ln -sf ${Aspect_DIR}/aspect .)

ENDMACRO()
